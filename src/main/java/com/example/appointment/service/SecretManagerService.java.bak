package com.example.appointment.service;

import com.google.cloud.secretmanager.v1.AccessSecretVersionResponse;
import com.google.cloud.secretmanager.v1.SecretManagerServiceClient;
import com.google.cloud.secretmanager.v1.SecretVersionName;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.stereotype.Service;

import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;
import java.io.IOException;
import java.util.concurrent.ConcurrentHashMap;
import java.util.Map;

/**
 * Service for securely retrieving secrets from Google Cloud Secret Manager
 */
@Service
@ConditionalOnProperty(name = "gcp.secret-manager.enabled", havingValue = "true")
public class SecretManagerService {
    
    private static final Logger log = LoggerFactory.getLogger(SecretManagerService.class);
    
    @Value("${gcp.project-id}")
    private String projectId;
    
    @Value("${gcp.secret-manager.enabled:false}")
    private boolean secretManagerEnabled;
    
    private SecretManagerServiceClient client;
    private final Map<String, String> secretCache = new ConcurrentHashMap<>();
    
    @PostConstruct
    public void init() {
        if (secretManagerEnabled) {
            try {
                this.client = SecretManagerServiceClient.create();
                log.info("Google Cloud Secret Manager client initialized for project: {}", projectId);
            } catch (IOException e) {
                log.error("Failed to initialize Google Cloud Secret Manager client", e);
                throw new RuntimeException("Failed to initialize Secret Manager client", e);
            }
        }
    }
    
    /**
     * Retrieves a secret from Google Cloud Secret Manager
     * 
     * @param secretName the name of the secret
     * @param version the version of the secret (default: "latest")
     * @return the secret value
     */
    public String getSecret(String secretName, String version) {
        if (!secretManagerEnabled || client == null) {
            log.warn("Secret Manager is disabled. Cannot retrieve secret: {}", secretName);
            return null;
        }
        
        String cacheKey = secretName + ":" + version;
        
        // Check cache first
        if (secretCache.containsKey(cacheKey)) {
            log.debug("Retrieved secret from cache: {}", secretName);
            return secretCache.get(cacheKey);
        }
        
        try {
            SecretVersionName secretVersionName = SecretVersionName.of(projectId, secretName, version);
            AccessSecretVersionResponse response = client.accessSecretVersion(secretVersionName);
            String secretValue = response.getPayload().getData().toStringUtf8();
            
            // Cache the secret
            secretCache.put(cacheKey, secretValue);
            
            log.info("Successfully retrieved secret: {}", secretName);
            return secretValue;
        } catch (Exception e) {
            log.error("Failed to retrieve secret: {} from Secret Manager", secretName, e);
            throw new RuntimeException("Failed to retrieve secret: " + secretName, e);
        }
    }
    
    /**
     * Retrieves a secret using the latest version
     */
    public String getSecret(String secretName) {
        return getSecret(secretName, "latest");
    }
    
    /**
     * Retrieves database credentials from Secret Manager
     */
    public DatabaseCredentials getDatabaseCredentials() {
        if (!secretManagerEnabled) {
            return null;
        }
        
        try {
            String dbHost = getSecret("db-host");
            String dbPort = getSecret("db-port");
            String dbName = getSecret("db-name");
            String dbUser = getSecret("db-username");
            String dbPassword = getSecret("db-password");
            
            return new DatabaseCredentials(dbHost, dbPort, dbName, dbUser, dbPassword);
        } catch (Exception e) {
            log.error("Failed to retrieve database credentials from Secret Manager", e);
            return null;
        }
    }
    
    /**
     * Retrieves Pub/Sub configuration from Secret Manager
     */
    public PubSubCredentials getPubSubCredentials() {
        if (!secretManagerEnabled) {
            return null;
        }
        
        try {
            String topicName = getSecret("pubsub-topic-name");
            String serviceAccountKey = getSecret("pubsub-service-account-key");
            
            return new PubSubCredentials(topicName, serviceAccountKey);
        } catch (Exception e) {
            log.error("Failed to retrieve Pub/Sub credentials from Secret Manager", e);
            return null;
        }
    }
    
    /**
     * Clears the secret cache
     */
    public void clearCache() {
        secretCache.clear();
        log.info("Secret cache cleared");
    }
    
    @PreDestroy
    public void destroy() {
        if (client != null) {
            try {
                client.close();
                log.info("Google Cloud Secret Manager client closed");
            } catch (Exception e) {
                log.warn("Error closing Secret Manager client", e);
            }
        }
        secretCache.clear();
    }
    
    /**
     * Database credentials container
     */
    public static class DatabaseCredentials {
        private final String host;
        private final String port;
        private final String name;
        private final String username;
        private final String password;
        
        public DatabaseCredentials(String host, String port, String name, String username, String password) {
            this.host = host;
            this.port = port;
            this.name = name;
            this.username = username;
            this.password = password;
        }
        
        public String getHost() { return host; }
        public String getPort() { return port; }
        public String getName() { return name; }
        public String getUsername() { return username; }
        public String getPassword() { return password; }
        
        public String getJdbcUrl() {
            return String.format("jdbc:postgresql://%s:%s/%s", host, port, name);
        }
    }
    
    /**
     * Pub/Sub credentials container
     */
    public static class PubSubCredentials {
        private final String topicName;
        private final String serviceAccountKey;
        
        public PubSubCredentials(String topicName, String serviceAccountKey) {
            this.topicName = topicName;
            this.serviceAccountKey = serviceAccountKey;
        }
        
        public String getTopicName() { return topicName; }
        public String getServiceAccountKey() { return serviceAccountKey; }
    }
}